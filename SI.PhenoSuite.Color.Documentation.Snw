\documentclass[a4paper]{article}

\title {SI.PhenoSuite Colours}
\author {Jan Wildenhain}

\usepackage[noae]{Sweave}
\usepackage{graphicx, verbatim}
\usepackage{grffile}

\setlength{\textwidth}{6.5in} 
\setlength{\textheight}{9in}
\setlength{\oddsidemargin}{0in} 
\setlength{\evensidemargin}{0in}
\setlength{\topmargin}{-1.5cm}

\begin{document}
\SweaveOpts{concordance=TRUE}

\maketitle

This is a basic example how you could use R to define colour spaces and statistical analysis options for PhenoSuite. Please Run the files in the following order to produce all nessesary colour files and images:

\begin{enumerate}
  \item \textbf{SI.PhenoSuite.RunUnitTests.R}
  \item \textbf{SI.PhenoSuite.Color.R} 
  \item \textbf{SI.PhenoSuite.Color.Tests.R}
\end{enumerate}
\textbf{TODO:} For PhenoSuite we should allow a sequential analysis of either side of the distribution, a colour range inverse and a range optimisation of the extremes in the lower and upper range of the outliers to highlight potential hits. 
\listoffigures

\section*{SI.PhenoSuite.RunUnitTests.R}
Will install all required packages and run the unit test for the *.function.R file. For its ease We use \textbf{pacman} as package installer.
<<init, eval = FALSE, echo = TRUE>>=
if (!require("pacman")) install.packages("pacman")
pacman::p_exists(R)

## install required packages with pacman
pacman::p_load(RUnit, testthat, viridis, dichromat, ggplot2)
@
The unit test are executed by RUnit and the tests are found in the  ./tests folder. 
<<unit, eval = FALSE, echo = TRUE>>=
library('RUnit')
source('SI.PhenoSuite.Color.functions.R')
test.pheno.suite.colours <- defineTestSuite("PhenoSuiteColours",
                              dirs           = file.path("tests"),
                              testFileRegexp = '^\\d+\\.R')
test.result <- runTestSuite(test.pheno.suite.colours)

printTextProtocol(test.result)
@
\section*{SI.PhenoSuite.Color.R}
Generate 9 colour schemes we will use in PhenoSuite and produce the csv files that contain the color bins. Two colour packages are used.
<<colours, eval = FALSE, echo = TRUE>>=
library('viridis')  ## Plasma palette
library('RColorBrewer')  ## RColorBrewer palettes
@
The colours palettes are stored in seperate csv files and loaded in PhenoSuite. The files contain a text column in the following format: 
<<csv, echo = TRUE>>=
<<colours>>
n <- 10  ## number of colours 
colours <- plasma(n, alpha = 1, begin = 0, end = 1)
colours
@
\begin{figure}
\centering
<<colourpies, fig = TRUE, echo = FALSE>>=
library('viridis') 
library('RColorBrewer')
n <- 20
par(mfrow    = c(3, 3),  
    mar      = c(1, 1, 1, 1),  
    bg       = "white", 
    col.main = "black")  
colours <- plasma(n, alpha = 1, begin = 0, end = 1)
pie(rep(1, n), radius = 1, labels = "", border = NA, col = colours, main='Plasma')
colours <- gray.colors(n, alpha = 1, start = 0.3, end = 0.9, gamma = 2.2)
pie(rep(1, n), radius = 1, labels = "", border = NA, col = colours, main = 'Monochrome')
colours <- colorRampPalette(brewer.pal(9,"PuRd"))(n)
pie(rep(1, n), col = colours, radius = 1, labels = "", border = NA, main = 'Purple-Red')
colours <- colorRampPalette(brewer.pal(11, "BrBG"))(n)
pie(rep(1, n),col = colours,radius = 1, labels = "", border = NA, main='Brown-Turquoise')
colours <- colorRampPalette(brewer.pal(11, "PiYG"))(n)
pie(rep(1, n), col = colours, radius = 1, labels = "", border = NA,main='Pink-Green')
colours <- colorRampPalette(brewer.pal(11, "PRGn"))(n)
pie(rep(1, n), col = colours, radius = 1, labels = "", border = NA, main ='Purple-Green')
colours <- colorRampPalette(brewer.pal(11, "PuOr"))(n)
pie(rep(1, n), col = colours, radius = 1, labels = "", border = NA, main = 'Purple-Orange')
colours <- colorRampPalette(brewer.pal(11, "RdBu"))(n)
pie(rep(1, n), col = colours, radius = 1, labels = "", border = NA, main ='Red-Blue')
colours <- colorRampPalette(brewer.pal(11, "RdYlBu"))(n)
pie(rep(1, n), col = colours, radius = 1, labels = "", border = NA, main = 'Red-Yellow-Blue')
@
\caption[PhenoSuite heatmap colours]{Nine PhenoSuite heatmap colour palettes with 20 bins. Colour palettes are organised clockwise starting at the first quarter.}
\end{figure}
\section{SI.PhenoSuite.Color.Tests.R}
when visualising data using heatmaps there are few options of interest. Either normalise the data uniformly between the minimum and maximum. The common way of normalisation is to use this formula,
\begin{equation}
x'=\frac{p - min}{max - min}
\end{equation}
or in R:
<<uniform, eval = FALSE, echo = TRUE>>=
  x <- (p - min) / (max - min)
@
Alternatively you can normalise the data centering the data around the median,
\begin{equation}
x'=\frac{p - min}{max - min}
\end{equation}
or in R:
<<mediancenter, eval = FALSE, echo = TRUE>>=
  r.max  <- abs(max - median)
  r.min  <- abs(median - min)
  if ((median - r.max) < min) {
    min <- median - r.max
  }
  if ((median + r.min) > max) {
    max <- median + r.min
  }
  x <- (p - min) / (max - min)
@
To show the differences between the uniform and median centered normalisation we created a random dataset drawn from three different distributions.
<<sourcefunctions, eval = TRUE, echo = FALSE>>=
source("SI.PhenoSuite.Color.functions.R")
@
<<insitudata, eval = TRUE, echo = TRUE>>=
<<sourcefunctions>>
## generate random 384-well plate data
r <- 16  # number of rows 
c <- 24  # number of columns
p              <- rnorm(r * c, 1, 0.1)
dim(p)         <- c(r, c)  ## turn vector to matrix
dim(p)  ## check plate size
## draw subset of the data from different distributions
p[7:10, 14:16] <- rnorm(12, 1.4, sd = .4)  
p[2:7, 4:9]    <- rnorm(36, 0.5, sd = .7)
## set row and column names
rownames(p) <- LETTERS[seq( from = 1, to = r )]
colnames(p) <- seq(1, c, 1)
head(p)[ ,1:5]  ## check first 5 rows and columns

# apply normalisatons
pp <- UniformNormData(p, max(p), min(p))
pq <- MedianCenterNormData(pp)
@
The data distribution between 
<<histograms, fig = TRUE, echo = FALSE>>=
<<insitudata>>
par(mfrow    = c(3, 1),  # set row and cols in plot
    mar      = c(3, 3, 3, 1),  # set margins bottom, left, top, right
    col.main = "black",
    col.lab  = "black",
    col.axis = "black",
    fg       = "black",
    bg       = "white")
p.hist <- hist(p, breaks = 50,col = "Grey", main = "Raw data")
p.hist <- hist(pp, xlim = c(0,1), breaks = 50,col = "Gold", main = "Uniform normalisation")
p.hist <- hist(pq, xlim = c(0,1), breaks = 50,col = "Blue", main = "Median center normalisation")
@
\end{document}